import aiohttp
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7554224281:AAFR9eSa7oxRilNmM2kuh3tIhDWJu1B08ws"
GROUP_ID = -1002411083990
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

async def search_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—à—É–∫ –∫–Ω–∏–≥ —á–µ—Ä–µ–∑ Telegram API"""
    if not context.args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ—à—É–∫:\n"
            "/search –Ω–∞–∑–≤–∞_–∫–Ω–∏–≥–∏\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /search –ö–æ–±–∑–∞—Ä"
        )
        return

    query = " ".join(context.args).lower()
    status_message = await update.message.reply_text("üîç –®—É–∫–∞—é –∫–Ω–∏–≥—É...")

    try:
        async with aiohttp.ClientSession() as session:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            url = f"{BASE_URL}getUpdates"
            async with session.get(url) as response:
                data = await response.json()

            if not data.get("ok"):
                raise Exception(f"Telegram API Error: {data}")

            found_books = []
            for result in data.get("result", []):
                message = result.get("message", {})
                if "document" in message:
                    file_name = message["document"]["file_name"].lower()
                    if query in file_name:
                        found_books.append(message)

                        if len(found_books) >= 5:  # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                            break

            if found_books:
                await status_message.edit_text(f"üìö –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_books)} –∫–Ω–∏–≥:")
                for book in found_books:
                    await context.bot.forward_message(
                        chat_id=update.effective_chat.id,
                        from_chat_id=GROUP_ID,
                        message_id=book["message_id"],
                    )
                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(found_books)} –∫–Ω–∏–≥ –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")
            else:
                await status_message.edit_text("‚ùå –ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                logger.info(f"–ö–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É: {query}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
        await status_message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("search", search_book))
    application.run_polling()

if __name__ == "__main__":
    main()
